{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nvar TypeStatus;\n(function (TypeStatus) {\n  TypeStatus[\"LOADING\"] = \"pending\";\n  TypeStatus[\"SUCCESS\"] = \"success\";\n  TypeStatus[\"ERROR\"] = \"error\";\n})(TypeStatus || (TypeStatus = {}));\nconst fetchPizzas = createAsyncThunk('pizza/fetchPizzasByIdStatus', async (_ref, thunkAPI) => {\n  let {\n    order,\n    sortPut,\n    category,\n    search,\n    currentPage\n  } = _ref;\n  const res = await axios.get(`https://63a4cc372a73744b00802459.mockapi.io/items?page=${currentPage}&limit=4${category}&sortPut=${sortPut}&order=${order}&${search}`);\n  console.log(res === null || res === void 0 ? void 0 : res.data);\n  if (res.data.length < 1) {\n    return thunkAPI.fulfillWithValue({\n      data: [],\n      message: 'Пиц не найдено'\n    });\n  }\n  // if (res.data === undefined) {\n  //     return thunkAPI.rejectWithValue({ message: 'Ошибка запроса' })\n  // }\n  else {\n    return thunkAPI.fulfillWithValue({\n      data: res.data,\n      message: 'запрос успешный'\n    });\n  }\n});\nconst initialState = {\n  pizzas: [],\n  status: 'pending',\n  message: ''\n};\nconst pizzaSlice = createSlice({\n  name: 'pizzas',\n  initialState,\n  reducers: {\n    setPizza(state, action) {\n      // @ts-ignore\n      state.pizzas = fetchPizzas(action.payload);\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchPizzas.pending, state => {\n      // pending state doesn't det payload anyway ! That's ridiculous !\n      state.status = TypeStatus.LOADING;\n      state.message = 'ожидание запроса';\n    });\n    builder.addCase(fetchPizzas.fulfilled, (state, action) => {\n      state.pizzas = action.payload.data;\n      state.message = action.payload.message;\n      state.status = TypeStatus.SUCCESS;\n    });\n    builder.addCase(fetchPizzas.rejected, state => {\n      state.pizzas = [];\n      state.status = TypeStatus.ERROR;\n      state.message = 'Ошибка запроса';\n    });\n  }\n});\nexport const selectPizza = state => state.pizza;\nexport { fetchPizzas };\nexport const {\n  setPizza\n} = pizzaSlice.actions;\nexport default pizzaSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","TypeStatus","fetchPizzas","thunkAPI","order","sortPut","category","search","currentPage","res","get","console","log","data","length","fulfillWithValue","message","initialState","pizzas","status","pizzaSlice","name","reducers","setPizza","state","action","payload","extraReducers","builder","addCase","pending","LOADING","fulfilled","SUCCESS","rejected","ERROR","selectPizza","pizza","actions","reducer"],"sources":["/Users/pavlo/Desktop/react-pizza-main/src/Redux/Slices/pizzaSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { RootState } from '../store'\n\n// вместо ипрта я заново создаю\nexport type SortType = {\n    name: string,\n    sortProperty: string\n}\n\nenum TypeStatus {\n    LOADING = 'pending',\n    SUCCESS = 'success',\n    ERROR = 'error'\n}\n\ntype PizzaType = {\n    category: number,\n    id: number,\n    imageUrl: string,\n    price: number,\n    rating: number // сумневаюсь\n    sizes: number[],\n    title: string,\n    types: number,\n}\n\ninterface InterfaceInitialPizzas {\n    pizzas: PizzaType[],\n    status: 'pending' | 'success' | 'error',\n    message: string\n}\n\ninterface InterfaceFetchPizzas {\n    order: string,\n    sortPut: SortType,\n    category: string,\n    search: string,\n    currentPage: number\n}\ninterface ResType {\n    data: PizzaType[],\n    message: string\n}\n\n\n\nconst fetchPizzas = createAsyncThunk<ResType, InterfaceFetchPizzas>('pizza/fetchPizzasByIdStatus',\n    async ({ order, sortPut, category, search, currentPage }, thunkAPI) => {\n\n        const res = await axios.get(`https://63a4cc372a73744b00802459.mockapi.io/items?page=${currentPage}&limit=4${category}&sortPut=${sortPut}&order=${order}&${search}`)\n        console.log(res?.data)\n        if (res.data.length < 1) {\n            return thunkAPI.fulfillWithValue({ data: [], message: 'Пиц не найдено', })\n        }\n        // if (res.data === undefined) {\n        //     return thunkAPI.rejectWithValue({ message: 'Ошибка запроса' })\n        // }\n        else {\n            return thunkAPI.fulfillWithValue({ data: res.data, message: 'запрос успешный' } as ResType)\n        }\n    },\n\n)\n\nconst initialState: InterfaceInitialPizzas = {\n    pizzas: [],\n    status: 'pending',\n    message: ''\n}\n\nconst pizzaSlice = createSlice({\n    name: 'pizzas',\n    initialState,\n    reducers: {\n\n        setPizza(state, action: PayloadAction<PizzaType[]>) {\n            // @ts-ignore\n            state.pizzas = fetchPizzas(action.payload)\n        }\n    },\n    extraReducers: (builder) => {\n        // Add reducers for additional action types here, and handle loading state as needed\n        builder.addCase(fetchPizzas.pending, (state) => {\n            // pending state doesn't det payload anyway ! That's ridiculous !\n            state.status = TypeStatus.LOADING\n            state.message = 'ожидание запроса'\n        })\n        builder.addCase(fetchPizzas.fulfilled, (state, action) => {\n            state.pizzas = action.payload.data\n            state.message = action.payload.message\n            state.status = TypeStatus.SUCCESS\n        });\n        builder.addCase(fetchPizzas.rejected, (state,) => {\n            state.pizzas = []\n            state.status = TypeStatus.ERROR\n            state.message = 'Ошибка запроса'\n        });\n    },\n})\n\nexport const selectPizza = (state: RootState) => state.pizza\n\nexport { fetchPizzas }\nexport const { setPizza, } = pizzaSlice.actions\nexport default pizzaSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,OAAOC,KAAK,MAAM,OAAO;AAAA,IASpBC,UAAU;AAAA,WAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;AAAA,GAAVA,UAAU,KAAVA,UAAU;AAqCf,MAAMC,WAAW,GAAGH,gBAAgB,CAAgC,6BAA6B,EAC7F,aAA0DI,QAAQ,KAAK;EAAA,IAAhE;IAAEC,KAAK;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAY,CAAC;EAEpD,MAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAE,0DAAyDF,WAAY,WAAUF,QAAS,YAAWD,OAAQ,UAASD,KAAM,IAAGG,MAAO,EAAC,CAAC;EACnKI,OAAO,CAACC,GAAG,CAACH,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEI,IAAI,CAAC;EACtB,IAAIJ,GAAG,CAACI,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,OAAOX,QAAQ,CAACY,gBAAgB,CAAC;MAAEF,IAAI,EAAE,EAAE;MAAEG,OAAO,EAAE;IAAkB,CAAC,CAAC;EAC9E;EACA;EACA;EACA;EAAA,KACK;IACD,OAAOb,QAAQ,CAACY,gBAAgB,CAAC;MAAEF,IAAI,EAAEJ,GAAG,CAACI,IAAI;MAAEG,OAAO,EAAE;IAAkB,CAAC,CAAY;EAC/F;AACJ,CAAC,CAEJ;AAED,MAAMC,YAAoC,GAAG;EACzCC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,SAAS;EACjBH,OAAO,EAAE;AACb,CAAC;AAED,MAAMI,UAAU,GAAGtB,WAAW,CAAC;EAC3BuB,IAAI,EAAE,QAAQ;EACdJ,YAAY;EACZK,QAAQ,EAAE;IAENC,QAAQ,CAACC,KAAK,EAAEC,MAAkC,EAAE;MAChD;MACAD,KAAK,CAACN,MAAM,GAAGhB,WAAW,CAACuB,MAAM,CAACC,OAAO,CAAC;IAC9C;EACJ,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IACxB;IACAA,OAAO,CAACC,OAAO,CAAC3B,WAAW,CAAC4B,OAAO,EAAGN,KAAK,IAAK;MAC5C;MACAA,KAAK,CAACL,MAAM,GAAGlB,UAAU,CAAC8B,OAAO;MACjCP,KAAK,CAACR,OAAO,GAAG,kBAAkB;IACtC,CAAC,CAAC;IACFY,OAAO,CAACC,OAAO,CAAC3B,WAAW,CAAC8B,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACN,MAAM,GAAGO,MAAM,CAACC,OAAO,CAACb,IAAI;MAClCW,KAAK,CAACR,OAAO,GAAGS,MAAM,CAACC,OAAO,CAACV,OAAO;MACtCQ,KAAK,CAACL,MAAM,GAAGlB,UAAU,CAACgC,OAAO;IACrC,CAAC,CAAC;IACFL,OAAO,CAACC,OAAO,CAAC3B,WAAW,CAACgC,QAAQ,EAAGV,KAAK,IAAM;MAC9CA,KAAK,CAACN,MAAM,GAAG,EAAE;MACjBM,KAAK,CAACL,MAAM,GAAGlB,UAAU,CAACkC,KAAK;MAC/BX,KAAK,CAACR,OAAO,GAAG,gBAAgB;IACpC,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMoB,WAAW,GAAIZ,KAAgB,IAAKA,KAAK,CAACa,KAAK;AAE5D,SAASnC,WAAW;AACpB,OAAO,MAAM;EAAEqB;AAAU,CAAC,GAAGH,UAAU,CAACkB,OAAO;AAC/C,eAAelB,UAAU,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}